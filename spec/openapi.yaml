# This is **ZelFlux** API documentation

openapi: 3.0.0
info:
  version: '0.0.2' # Your API version
  # It can be any string but it is better to use semantic versioning: http://semver.org/
  # Warning: OpenAPI require version to be string, but without quotation YAML can recognize it as number.
  
  title: ZelFlux # Replace with your API title
  # Keep it simple. Don't add "API" or version at the end of the string.

  contact:
    email: tadeas.kmenta@zel.cash # [Optional] Replace with your contact email
    url: 'https://zelcash.github.io/zelfluxdocs/' # [Optional] Replace with link to your contact form
  license:
    name: GNU AGPLv3
    url: 'https://www.gnu.org/licenses/agpl-3.0.en.html'
  x-logo:
    url: 'https://raw.githubusercontent.com/zelcash/zelfluxdocs/master/zelflux.png'
  
  # Describe your API here, you can use GFM (https://guides.github.com/features/mastering-markdown) here
  description: |
    This is an API documentation of calls available to be made to any ZelFlux
    ZelFlux is completely open source and we encourage everyone to feel free and contribute :)
    # Introduction
    ZelFlux posseses with 4 tier hiearchy level API. 
    * Public API level - available without any permission, does not require signing
    * User API level - user level permission, requires signing
    * ZelTeam API level - ZelTeam level permission (an appointed Zel Team member has access to those API calls), requires signing
    * Admin API level - Admin level permission, requires signing. ZelNode owner.
    
    Most calls are available via GET request with some that may require large amount of data via POST request. 
    Websocket is currently used only for simplifying login operations and for internal ZelFlux communication
  
externalDocs:
  description: ZelFlux
  url: 'https://github.com/zelcash/zelflux'

# A list of tags used by the specification with additional metadata.
# The order of the tags can be used to reflect on their order by the parsing tools.
tags:
  - name: Authentication
    description: Calls that are neccessary to be made for correct signing into ZelFlux and obtaining zelauth header.
  - name: ZelID
    description: Calls that interact with ZelID and login/authentication management of ZelFlux
  - name: ZelFlux
    description: Calls that interact with ZelFlux network
  - name: ZelCash
    description: Calls that interact with locally running ZelCash daemon
  - name: ZelNode
    description: Calls that interact with local ZelNode and its network
servers:
  - url: 'http://157.230.249.150:16127'
  - url: 'http://94.177.240.7:16127'
  - url: 'http://89.40.115.8:16127'
  - url: 'http://94.177.241.10:16127'
  - url: 'http://54.37.234.130:16127'
  - url: 'http://194.182.83.182:16127'
# Holds the relative paths to the individual endpoints. The path is appended to the
# basePath in order to construct the full URL. 
paths:
  '/zelid/loginphrase': # path parameter in curly braces
    get: # documentation for GET operation for this path
      tags:
        - Authentication
        - ZelID
      summary: Obtain login phrase
      description: Obtain valid Login Phrase for signing into ZelFlux. Login Phrase is at least 40 characters, first 13 characters is server timestamp and is valid for 15 minutes.
      operationId: loginPhrase
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: 
                    type: string
                    description: status
                    enum: [success, error]
                  data:
                    type: string
                    description: loginphrase
              example:
                status: success
                data: 1574994809615gj4ct52kzz695twl0l27np0ivkmvu2ow4lbtpwk2nvf2k
  '/zelid/verifylogin': # path parameter in curly braces
    post: # documentation for POST operation for this path
      tags:
        - Authentication
        - ZelID
      summary: Login into ZelFlux
      description: Login into ZelFlux by submitting correct ZelID, login phrase and signature. In case of success status response, we can use supplied data (zelid, loginPhrase, signature) as zelauth header as part of api calls that require a user to be logged in.
        Additionally it is possible to listen for a response on websocket ws://{ZelNode_IP}:16127/ws/zelid/{loginPhrase}.
      operationId: verifyLogin
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: 
                    type: string
                    description: status
                    enum: [success, error]
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        description: explanation of status
                      zelid:
                        type: string
                        description: supplied ZelID or bitcoin P2PKH address
                      loginPhrase:
                        type: string
                        description: valid and active loginPhrase
                      signature:
                        type: string
                        description: signature of loginPhrase signed with zelid
                      privilege:
                        type: string
                        description: granted ZelFlux privilege
                        enum: [user, zelteam, admin]
              example:
                status: success
                data:
                  message: Successfully logged in
                  zelid: 1CbErtneaX2QVyUfwU7JGB7VzvPgrgc3uC
                  loginPhrase: 1575012988077darschvve5ag82g8e8sgeij4sn61842ya7ovxi9r3kba
                  signature: IAMZBB0p8aQ6A0Zt8uUKFLdWvPJlBypuczhaM6/R+s5bI72NQs/TPF1KYywvJlumMZyvLmk7JelDwaQbfTjqtSs=
                  privilage: admin
      # request body documentation
      requestBody:
        content:
          text/plain:
            schema:
              $ref: '#/components/schemas/ZelIDLogin'
        description: ZelID login object
        required: true
  '/zelid/loggedsessions': # path parameter in curly braces
    get: # documentation for GET operation for this path
      tags:
        - ZelID
      summary: Obtain all logged sessions of ZelID
      description: Gets all currently active logged sessions in ZelFlux tied to given ZelID
      operationId: loggedSessions
      # security schemas applied to this operation
      security:
        - ZelID: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: 
                    type: string
                    description: status
                    enum: [success, error]
                  data:
                   type: array
                   items: 
                     type: object
                     properties:
                       zelid:
                         type: string
                         description: associated ZelID
                       loginPhrase:
                         type: string
                         description: login phrase used for session
              example:
                status: success
                data:
                - zelid: 1CbErtneaX2QVyUfwU7JGB7VzvPgrgc3uC
                  loginPhrase: 1566749385160npvtiku0z7yqsxgenyvzfmfrz7pyxrxvflv3sfztbc
                - zelid: 1CbErtneaX2QVyUfwU7JGB7VzvPgrgc3uC
                  loginPhrase: 1566822581693fuuo3oi0sqdvab9h8baavc0kdawxvbwjgdbjsy5tk739m
                - zelid: 1CbErtneaX2QVyUfwU7JGB7VzvPgrgc3uC
                  loginPhrase: 1566970790344nhd5tjwyphq4l1azf5o64axfz75b8892poo853ivbfc
                - zelid: 1CbErtneaX2QVyUfwU7JGB7VzvPgrgc3uC
                  loginPhrase: 15673514189266fzehz9q1ujvw4fg5lsko9q6qrfji3iwfg9hkblx5dpm
                - zelid: 1CbErtneaX2QVyUfwU7JGB7VzvPgrgc3uC
                  loginPhrase: 1575011828315mzqenqvi9ixaq0yr34g8jtvwgcs3d33cf1ies0myd
                - zelid: 1CbErtneaX2QVyUfwU7JGB7VzvPgrgc3uC
                  loginPhrase: 1575012988077darschvve5ag82g8e8sgeij4sn61842ya7ovxi9r3kba
# An object to hold reusable parts that can be used across the spec
components:
  schemas:
    signature:
      description: Signature of signed loginPhrase with zelid
      type: string
      example: H+ZB3oSrsw6XkBxxlbwk33LEBJYvqtbMIm2kL9JzuoXMC6pSZd0lBHdnhJYzMTXv81zZQ7G/pkK1NvYN7cNF0GE=
    ZelIDLogin:
      type: object
      properties:
        loginPhrase:
          description: Login Phrase. Provided by GET /zelid/loginphrase
          type: string
          minLength: 40
          example: 1574991374806spbcvsuwerl52tppx9dw5khuz8rew13mkq86gg8r2c
        zelid:
          description: ZelID or any P2PKH bitcoin address
          type: string
          minLength: 26
          maxLength: 35
          example: 1CbErtneaX2QVyUfwU7JGB7VzvPgrgc3uC
        signature:
          $ref: '#/components/schemas/signature'
  headers:
    zelidauth:
      description: ZelID authentication header
      schema:
        type: string
  # Security scheme definitions that can be used across the specification.
  securitySchemes:
    ZelID: # security definition name (you can name it as you want)
      description: Zel ID is an authentication system based on Bitcoin message signing. zelidauth header consist of stringified query of zelid, signature, loginPhrase Please refer to Authentication workflow section on how to obtain correct zelidauth header. An example of a header is `zelid=1CbErtneaX2QVyUfwU7JGB7VzvPgrgc3uC&signature=H%2BZB3oSrsw6XkBxxlbwk33LEBJYvqtbMIm2kL9JzuoXMC6pSZd0lBHdnhJYzMTXv81zZQ7G%2FpkK1NvYN7cNF0GE%3D&loginPhrase=1574991374806spbcvsuwerl52tppx9dw5khuz8rew13mkq86gg8r2c`
      type: apiKey
      in: header # Where API key will be passed: header or query
      name: zelidauth # API key parameter name
    
